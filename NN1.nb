(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     89943,       1691]
NotebookOptionsPosition[     88938,       1669]
NotebookOutlinePosition[     89286,       1684]
CellTagsIndexPosition[     89243,       1681]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"ClearAll", "[", "\"\<Global`*\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.7176212016723747`*^9, 
  3.7176212060134387`*^9}},ExpressionUUID->"16b7220e-a1be-4d25-ae58-\
4df1f75fc9d4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"training", "=", 
   RowBox[{"Transpose", "[", 
    RowBox[{"Partition", "[", 
     RowBox[{
      RowBox[{"StringTrim", "[", 
       RowBox[{"DeleteStopwords", "[", 
        RowBox[{"StringSplit", "[", 
         RowBox[{
          RowBox[{
          "Import", "[", 
           "\"\<C:\\\\Users\\\\Adam \
Yu\\\\source\\\\repos\\\\PeacefulExpedition\\\\trainingdata.txt\>\"", "]"}], 
          ",", "\"\<\\n\>\""}], "]"}], "]"}], "]"}], ",", "2"}], "]"}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.717620409031887*^9, 3.717620449034192*^9}, 
   3.7176211790732846`*^9, {3.7176275761910753`*^9, 3.7176275867270613`*^9}, 
   3.7176356493448687`*^9, 
   3.7176388318240557`*^9},ExpressionUUID->"aaf4c49f-7e09-4c16-b1fc-\
ab74eed0c828"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"c", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"Normal", "[", 
     RowBox[{"AssociationThread", "[", 
      RowBox[{
       RowBox[{"training", "[", 
        RowBox[{"[", "1", "]"}], "]"}], ",", 
       RowBox[{"training", "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "]"}], ",", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Quality\>\""}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"ClassifierInformation", "[", "c", "]"}]}], "Input",
 CellChangeTimes->{{3.717620454867362*^9, 3.7176204795411963`*^9}, {
   3.71762115970436*^9, 3.717621162853919*^9}, {3.7176211970745583`*^9, 
   3.717621199863466*^9}, {3.7176282399504924`*^9, 3.717628272619713*^9}, {
   3.7176283042012553`*^9, 3.717628338563347*^9}, 3.717634418205202*^9, 
   3.7176346515004964`*^9, {3.7176356596256037`*^9, 
   3.717635661035119*^9}},ExpressionUUID->"f6c93fd9-abe4-408c-813f-\
88b9fd75fc6b"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["ClassifierFunction", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SquarePlusIconMedium"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 3.5 CurrentValue["FontCapHeight"]/
                   AbsoluteCurrentValue[Magnification]}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 3.5 CurrentValue["FontCapHeight"]/
                   AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                FrameTicks -> None, FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Text\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"essential\"", "\"extracurricular\"", 
                    "\"leisure\"", "\"sport\"", "\"work\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SquareMinusIconMedium"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 3.5 CurrentValue["FontCapHeight"]/
                   AbsoluteCurrentValue[Magnification]}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 3.5 CurrentValue["FontCapHeight"]/
                   AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                FrameTicks -> None, FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Text\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"essential\"", "\"extracurricular\"", 
                    "\"leisure\"", "\"sport\"", "\"work\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Markov\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["291", "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]}, "SummaryPanel", 
        DisplayFunction -> (
         ButtonBox[#, Active -> False, Alignment -> Left, 
          Appearance -> {
           "Default" -> 
            FrontEnd`FileName[{"Typeset", "SummaryBox"}, "Panel.9.png"]}, 
          FrameMargins -> 7, BaseStyle -> {}, 
          DefaultBaseStyle -> {"Panel", Background -> None}, BaselinePosition -> 
          Baseline]& )], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("ClassifierFunction[\[Ellipsis]]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.71762048368875*^9, 3.7176210126251802`*^9, 3.717621077930091*^9, {
   3.71762118840996*^9, 3.717621210655511*^9}, 3.717621687153822*^9, 
   3.7176271511693745`*^9, 3.7176275901482363`*^9, 3.7176276640774117`*^9, {
   3.7176282453202505`*^9, 3.7176282760794516`*^9}, {3.7176283105090303`*^9, 
   3.717628365242456*^9}, 3.7176284394769316`*^9, 3.7176325622338457`*^9, {
   3.7176343942589855`*^9, 3.717634426811082*^9}, {3.717634635570165*^9, 
   3.7176346537188787`*^9}, 3.7176350312631955`*^9, 3.717635684325463*^9, 
   3.7176357427106543`*^9, 3.7176358530099707`*^9, 3.717636183106284*^9, 
   3.7176362594445667`*^9, {3.7176388214257936`*^9, 3.71763883431756*^9}, 
   3.717638984382674*^9, 3.7176390351261587`*^9, 3.717639091275073*^9, 
   3.7176403618084154`*^9, {3.7176407005590525`*^9, 
   3.7176407688615246`*^9}},ExpressionUUID->"caac58ba-cab8-4f19-a868-\
cbed3e2e76aa"],

Cell[BoxData[
 TagBox[
  StyleBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        FrameBox[
         StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
          StripOnInput->False,
          FontSize->12,
          FontWeight->Bold],
         FrameMargins->{{10, 5}, {-5, 5}},
         FrameStyle->None,
         StripOnInput->False],
        Alignment->{Left, Bottom},
        Background->RGBColor[0.93119, 0.93119, 0.93119],
        Frame->{{False, False}, {True, False}},
        FrameStyle->Opacity[0.1],
        ItemSize->{Automatic, 1},
        StripOnInput->False]},
      {
       ItemBox[
        TagBox[
         FrameBox[
          TagBox[GridBox[{
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Input type\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], "\<\"Text\"\>"},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"Classes\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               ",","\",\"","\"essential\"","\"extracurricular\"",
                "\"leisure\"","\"sport\"","\"work\""},
               "RowWithSeparators"]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"Method\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox["\<\"Markov\"\>",
                TemplateBox[{
                  TagBox[
                   
                   DynamicModuleBox[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
                    Data`UnorderedAssociation[
                    "RowCount" -> 2, "Length" -> 2, "InitialType" -> 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[
                    TypeSystem`Enumeration["MinimumTokenCount", "Order"]], 
                    TypeSystem`Atom[Integer], 2], "Shape" -> 
                    TypeSystem`PackageScope`Limited[
                    TypeSystem`PackageScope`ColumnShape[
                    TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`AtomShape[153.], 
                    TypeSystem`PackageScope`AtomShape[34]]], 2, {}], 
                    "InitialData" -> 
                    TypeSystem`PackageScope`CacheHandle[699398800], "Type" -> 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[
                    TypeSystem`Enumeration["MinimumTokenCount", "Order"]], 
                    TypeSystem`Atom[Integer], 2], "HandleQ" -> True, 
                    "RowTarget" -> 20, "Data" -> 
                    TypeSystem`PackageScope`CacheHandle[699398800]], 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
                    DynamicModule[{
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
                    Style[
                    Grid[{{
                    Item[
                    Pane[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["Order", 
                    Style[
                    "Order", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 190782936][{
                    Key["Order"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    190782936][
                    GeneralUtilities`Slice[
                    Key["Order"]]], "Mouse"], 
                    ImageSize -> {{153., Full}, Automatic}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["1"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    190782936][
                    GeneralUtilities`Slice[
                    Key["Order"]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Pane[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["MinimumTokenCount", 
                    Style[
                    "MinimumTokenCount", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 190782936][{
                    Key["MinimumTokenCount"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    190782936][
                    GeneralUtilities`Slice[
                    Key["MinimumTokenCount"]]], "Mouse"], 
                    ImageSize -> {{153., Full}, Automatic}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["0"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    190782936][
                    GeneralUtilities`Slice[
                    Key["MinimumTokenCount"]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}}, 
                    BaseStyle -> {ContextMenu -> {
                    MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                    FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
                    Dividers -> All, FrameStyle -> GrayLevel[0.85], 
                    BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
                    LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
                    False, ShowAutoStyles -> False]], 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
                    TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
                    Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
                    Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
                    
                    Module[{
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                    TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                    If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                    TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 190782936][
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                    Not[
                    FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
                    TypeSystem`SparseGrid[
                    TypeSystem`H["(data no longer present)"]], 
                    If[GeneralUtilities`$DebugMode, 
                    
                    Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    "  ", 
                    TypeSystem`NestedGrid`PackagePrivate`formatState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
                    DynamicModuleValues :> {}], 
                    TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
                    TypeSystem`PackageScope`Pathbar[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    190782936]]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
                    Dynamic[
                    Replace[
                    MouseAnnotation[Null], {
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    190782936][Null] -> "", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    190782936][
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                    Blank[]]] :> (
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
                    TypeSystem`NestedGrid`PackagePrivate`path; 
                    TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
                    TypeSystem`NestedGrid`PackagePrivate`path, 
                    TypeSystem`NestedGrid`PackagePrivate`makePathElements]), 
                    Null :> Spacer[10], Blank[] :> Spacer[10]}], 
                    TrackedSymbols :> {}], FrameStyle -> None, ImageMargins -> 
                    0, FrameMargins -> 0, Alignment -> Top, 
                    ImageSize -> {Automatic, 14}]}, 
                    DynamicBox[
                    ToBoxes[
                    Column[
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], 
                    Spacings -> 
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
                    0, {{}, {0, 0.05, 0}}]], StandardForm], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
                    Initialization :> Block[{$ContextPath = $ContextPath}, 
                    Needs["TypeSystem`"]], DynamicModuleValues :> {}, 
                    BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
                    TypeSystem`NestedGrid`PackagePrivate`deleteState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
                   DefaultBaseStyle -> "Deploy"]}, "CopyTag", 
                 DisplayFunction -> (#& ), 
                 InterpretationFunction -> ("Dataset[<>]"& )]],
               Annotation[#, 
                Dataset[
                 Association["Order" -> 1, "MinimumTokenCount" -> 0], 
                 TypeSystem`Assoc[
                  TypeSystem`Atom[
                   TypeSystem`Enumeration["MinimumTokenCount", "Order"]], 
                  TypeSystem`Atom[Integer], 2], 
                 Association["ID" -> 155082799227137]], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Accuracy\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                
                TemplateBox[{
                 TemplateBox[{
                   "67.2413793103448256261`3.", "\"%\"", "percent", 
                    "\"Percent\""}, "QuantityPostfix", SyntaxForm -> Mod],
                  StyleBox[
                   TemplateBox[{"\" \[PlusMinus] \"", 
                    TemplateBox[{
                    "6.2164677163172381569`2.", "\"%\"", "percent", 
                    "\"Percent\""}, "QuantityPostfix", SyntaxForm -> Mod]}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.5480844387771035553`3.",
                   "\", \"", "0.7967431474297930194`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.5480844387771035553`3., 
                  ", ", 0.7967431474297930194`3., "]"}], "Tooltip"]& ]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox[
                 TagBox[
                  TooltipBox[
                  "\"Loss\"", "\"Mean cross entropy\"", LabelStyle -> 
                   "TextStyling"], 
                  Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"0.8502792196386800283`3.",StyleBox[
                   
                   TemplateBox[{
                    "\" \[PlusMinus] \"", "0.1602286916250992566`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.5298218363884814597`3.",
                   "\", \"", "1.1707366028888785969`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.5298218363884814597`3., 
                  ", ", 1.1707366028888785969`3., "]"}], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Evaluation time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "175.`",
                RowBox[{
                 "\"\[Micro]s\"", "\[InvisibleSpace]", "\"/\"", 
                  "\[InvisibleSpace]", "\"example\""}],
                "microseconds per example",FractionBox[
                "\"Microseconds\"", "\"Examples\""]},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Classifier memory\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"185.`","\"kB\"","kilobytes","\"Kilobytes\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Training examples used\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"291","\"examples\"","examples","\"Examples\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Training time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"1.16`","\"s\"","seconds","\"Seconds\""},
               "Quantity"]},
             {
              
              DynamicModuleBox[{
               MachineLearning`file5Automation`PackagePrivate`pos$$ = 1}, 
               DynamicBox[ToBoxes[
                 Show[
                  Part[{
                    Graphics[{{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.5247108285815403}, {
                    3.912023005428146, 0.49242854281729004`}, {
                    5.4510384535657, -0.1621904897474504}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, 0.3423892717875857}, {
                    2.302585092994046, 0.020131067046504095`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.5247108285815403}}, {{
                    3.912023005428146, 0.49242854281729004`}}, {{
                    5.4510384535657, -0.1621904897474504}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.3423892717875857}}, {{
                    2.302585092994046, 
                    0.020131067046504095`}}}]}, {}}}, {}, {}, {}, {}}}, {{{}, \
{{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, 0.5041662173197857}, {
                    2.302585092994046, 0.5448418417489688}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.912023005428146, 0.42028487090108513`}, {
                    3.912023005428146, 0.5597158940906156}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.4510384535657, -0.37099045506675515`}, {
                    5.4510384535657, 
                    0.010453086889555131`}}]}}}, {}, {}, {}, {}}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.181148669809394, -0.21204623059390945`}, 
                    PlotRange -> {{2.2337945180108325`, 
                    Log[291]}, {-0.20035167409906102`, 0.5247108285815403}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {35, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.181148669809394, -0.21204623059390945`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {35, 0}}, ImageSize -> 330, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.2337945180108325`, 
                    Log[291]}, {-0.20035167409906102`, 0.5247108285815403}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.25976427885459974`}, {
                    3.912023005428146, 0.47266152846260145`}, {
                    5.4510384535657, 0.6724137931034483}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, 0.560344827586207}, {
                    2.302585092994046, 0.3117171346255197}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.25976427885459974`}}, {{
                    3.912023005428146, 0.47266152846260145`}}, {{
                    5.4510384535657, 0.6724137931034483}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.560344827586207}}, {{
                    2.302585092994046, 
                    0.3117171346255197}}}]}, {}}}, {}, {}, {}, {}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, DisplayFunction -> Identity, DisplayFunction -> 
                    Identity, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, 
                    AxesOrigin -> {2.181148669809394, 0.22470048153718603`}, 
                    PlotRange -> {{2.2337945180108325`, 
                    Log[291]}, {0.25976427885459974`, 1}}, PlotRangeClipping -> 
                    True, ImagePadding -> {{30, 10}, {35, 0}}, 
                    DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.181148669809394, 0.22470048153718603`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {35, 0}}, ImageSize -> 330, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.2337945180108325`, 
                    Log[291]}, {0.25976427885459974`, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], Automatic}}], 
                    Graphics[{{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.5247108285815403}, {
                    3.912023005428146, 0.49242854281729004`}, {
                    5.4510384535657, -0.1621904897474504}}]}, 
                    "Markov"]}}, {}, {}, {}, {}}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.181148669809394, -0.21204623059390945`}, 
                    PlotRange -> {{2.2337945180108325`, 
                    Log[291]}, {-0.20035167409906102`, 0.5247108285815403}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {35, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.181148669809394, -0.21204623059390945`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {35, 0}}, ImageSize -> 330, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.2337945180108325`, 
                    Log[291]}, {-0.20035167409906102`, 0.5247108285815403}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}]}, 
                   MachineLearning`file5Automation`PackagePrivate`pos$$], 
                  PlotLabel -> Grid[{{
                    Button[
                    
                    MachineLearning`file5Automation`PackagePrivate`\
buttonGraphics[
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]], 
                    MachineLearning`file5Automation`PackagePrivate`pos$$ = 
                    Max[MachineLearning`file5Automation`PackagePrivate`pos$$ - 
                    1, 1], Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file5Automation`PackagePrivate`pos$$], 
                    Button[
                    
                    MachineLearning`file5Automation`PackagePrivate`\
buttonGraphics[
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]], 
                    MachineLearning`file5Automation`PackagePrivate`pos$$ = 
                    Min[MachineLearning`file5Automation`PackagePrivate`pos$$ + 
                    1, 
                    Length[{
                    Graphics[{{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.5247108285815403}, {
                    3.912023005428146, 0.49242854281729004`}, {
                    5.4510384535657, -0.1621904897474504}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, 0.3423892717875857}, {
                    2.302585092994046, 0.020131067046504095`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.5247108285815403}}, {{
                    3.912023005428146, 0.49242854281729004`}}, {{
                    5.4510384535657, -0.1621904897474504}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.3423892717875857}}, {{
                    2.302585092994046, 
                    0.020131067046504095`}}}]}, {}}}, {}, {}, {}, {}}}, {{{}, \
{{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    Line[{{2.302585092994046, 0.5041662173197857}, {
                    2.302585092994046, 0.5448418417489688}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.912023005428146, 0.42028487090108513`}, {
                    3.912023005428146, 0.5597158940906156}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.4510384535657, -0.37099045506675515`}, {
                    5.4510384535657, 
                    0.010453086889555131`}}]}}}, {}, {}, {}, {}}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.181148669809394, -0.21204623059390945`}, 
                    PlotRange -> {{2.2337945180108325`, 
                    Log[291]}, {-0.20035167409906102`, 0.5247108285815403}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {35, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.181148669809394, -0.21204623059390945`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {35, 0}}, ImageSize -> 330, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.2337945180108325`, 
                    Log[291]}, {-0.20035167409906102`, 0.5247108285815403}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.25976427885459974`}, {
                    3.912023005428146, 0.47266152846260145`}, {
                    5.4510384535657, 0.6724137931034483}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, 0.560344827586207}, {
                    2.302585092994046, 0.3117171346255197}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.25976427885459974`}}, {{
                    3.912023005428146, 0.47266152846260145`}}, {{
                    5.4510384535657, 0.6724137931034483}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.560344827586207}}, {{
                    2.302585092994046, 
                    0.3117171346255197}}}]}, {}}}, {}, {}, {}, {}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, DisplayFunction -> Identity, DisplayFunction -> 
                    Identity, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, 
                    AxesOrigin -> {2.181148669809394, 0.22470048153718603`}, 
                    PlotRange -> {{2.2337945180108325`, 
                    Log[291]}, {0.25976427885459974`, 1}}, PlotRangeClipping -> 
                    True, ImagePadding -> {{30, 10}, {35, 0}}, 
                    DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.181148669809394, 0.22470048153718603`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {35, 0}}, ImageSize -> 330, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.2337945180108325`, 
                    Log[291]}, {0.25976427885459974`, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], Automatic}}], 
                    Graphics[{{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.5247108285815403}, {
                    3.912023005428146, 0.49242854281729004`}, {
                    5.4510384535657, -0.1621904897474504}}]}, 
                    "Markov"]}}, {}, {}, {}, {}}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.181148669809394, -0.21204623059390945`}, 
                    PlotRange -> {{2.2337945180108325`, 
                    Log[291]}, {-0.20035167409906102`, 0.5247108285815403}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {35, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.181148669809394, -0.21204623059390945`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {35, 0}}, ImageSize -> 330, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.2337945180108325`, 
                    Log[291]}, {-0.20035167409906102`, 0.5247108285815403}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}]}]], Appearance -> 
                    "Frameless"]}}, Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                ImageSizeCache->{330., {117., 121.}}],
               DynamicModuleValues:>{}], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            
            GridBoxAlignment->{
             "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
              "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
            GridBoxDividers->{"Columns" -> {False, {
                 Opacity[0.15]}, False}},
            
            GridBoxItemSize->{
             "Columns" -> {Automatic, {Automatic}}, "ColumnsIndexed" -> {}, 
              "Rows" -> {{1.}}, "RowsIndexed" -> {}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], 
                Offset[1.1199999999999999`], {
                 Offset[1.75]}, 
                Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.8]}, 
                Offset[0.2]}, "RowsIndexed" -> {}}],
           "Grid"],
          FrameMargins->{{5, 5}, {10, 5}},
          FrameStyle->None,
          StripOnInput->False],
         Deploy,
         DefaultBaseStyle->"Deploy"],
        Alignment->Center,
        BaseStyle->{
         FontWeight -> "Light", FontSize -> 12, FontFamily -> "Segoe UI", 
          NumberMarks -> False, Deployed -> False},
        StripOnInput->False]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Background->RGBColor[0.9802, 0.9802, 0.9802],
    FrameMargins->{{0, 0}, {0, 0}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   StripOnInput->False,
   LineBreakWithin->False],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 CellChangeTimes->{
  3.71762048368875*^9, 3.7176210126251802`*^9, 3.717621077930091*^9, {
   3.71762118840996*^9, 3.717621210655511*^9}, 3.717621687153822*^9, 
   3.7176271511693745`*^9, 3.7176275901482363`*^9, 3.7176276640774117`*^9, {
   3.7176282453202505`*^9, 3.7176282760794516`*^9}, {3.7176283105090303`*^9, 
   3.717628365242456*^9}, 3.7176284394769316`*^9, 3.7176325622338457`*^9, {
   3.7176343942589855`*^9, 3.717634426811082*^9}, {3.717634635570165*^9, 
   3.7176346537188787`*^9}, 3.7176350312631955`*^9, 3.717635684325463*^9, 
   3.7176357427106543`*^9, 3.7176358530099707`*^9, 3.717636183106284*^9, 
   3.7176362594445667`*^9, {3.7176388214257936`*^9, 3.71763883431756*^9}, 
   3.717638984382674*^9, 3.7176390351261587`*^9, 3.717639091275073*^9, 
   3.7176403618084154`*^9, {3.7176407005590525`*^9, 
   3.7176407692332973`*^9}},ExpressionUUID->"5c79d893-1375-4038-9d8a-\
e2823ae70772"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"api", "=", 
    RowBox[{"APIFunction", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<query\>\"", "\[Rule]", 
        RowBox[{"\"\<String\>\"", "\[Rule]", "\"\<default argument\>\""}]}], 
       "}"}], ",", 
      RowBox[{
       RowBox[{
        RowBox[{"Classify", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"Normal", "[", 
             RowBox[{"AssociationThread", "[", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", 
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "]"}], "&"}], "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "\"\<drink water\>\"", ",", "\"\<math\>\"", ",", 
               "\"\<play piano\>\"", ",", "\"\<play video games\>\"", ",", 
               "\"\<play badminton\>\"", ",", "\"\<eat dinner\>\"", ",", 
               "\"\<solve physics problem\>\"", ",", "\"\<join key club\>\"", 
               ",", "\"\<watch television\>\"", ",", "\"\<train  boating\>\"",
                ",", "\"\<shower\>\"", ",", "\"\<write english essay\>\"", 
               ",", "\"\<sketch  vase\>\"", ",", "\"\<nap\>\"", ",", 
               "\"\<compete  ultimate frisbee\>\"", ",", 
               "\"\<buy vegetables\>\"", ",", "\"\<clean toilet\>\"", ",", 
               "\"\<spend time wood working\>\"", ",", "\"\<\>\"", ",", 
               "\"\<swimming\>\"", ",", "\"\<cook dinner\>\"", ",", 
               "\"\<collaborate  group project\>\"", ",", "\"\<knit\>\"", 
               ",", "\"\<watch netflix\>\"", ",", "\"\<eat apple\>\"", ",", 
               "\"\<play piano\>\"", ",", "\"\<play video games\>\"", ",", 
               "\"\<finish math homework\>\"", ",", "\"\<drink wine\>\"", 
               ",", "\"\<play violin\>\"", ",", "\"\<drink coffee\>\"", ",", 
               "\"\<play badminton\>\"", ",", "\"\<play tennis\>\"", ",", 
               "\"\<write essay\>\"", ",", "\"\<cheerleading practice\>\"", 
               ",", "\"\<attend club meeting\>\"", ",", 
               "\"\<write symphony\>\"", ",", "\"\<write proof  P = NP\>\"", 
               ",", "\"\<prove  Riemann hypothesis\>\"", ",", 
               "\"\<psychology homework\>\"", ",", 
               "\"\<prepare notes  tomorrow\>\"", ",", "\"\<meditate\>\"", 
               ",", "\"\<write announcement\>\"", ",", 
               "\"\<horseback riding\>\"", ",", 
               "\"\<going   play ball tomororow\>\"", ",", 
               "\"\<going  finish  history work tonight\>\"", ",", 
               "\"\<going   gokarting\>\"", ",", 
               "\"\<playing paintball later\>\"", ",", 
               "\"\<taking  roadtrip  lunch\>\"", ",", 
               "\"\<going   city ride tonight\>\"", ",", 
               "\"\<spinning  fidget spinner later\>\"", ",", 
               "\"\<playing  phone games later\>\"", ",", 
               "\"\<eating ass\>\"", ",", "\"\<going   Hackathon\>\"", ",", 
               "\"\<reading Spivak calculus\>\"", ",", 
               "\"\<reading Harry Potter later\>\"", ",", 
               "\"\<going   gym  bodybuild\>\"", ",", 
               "\"\<going  buy pizza\>\"", ",", "\"\<going   arcade\>\"", 
               ",", "\"\<swimming\>\"", ",", "\"\<hoola-hooping\>\"", ",", 
               "\"\<Eat  salad\>\"", ",", "\"\<Eat banana\>\"", ",", 
               "\"\<consuming slices  pizza\>\"", ",", 
               "\"\<going   atrium   sushi\>\"", ",", "\"\<drink water\>\"", 
               ",", "\"\<drink champagne\>\"", ",", "\"\<eat ramen\>\"", ",", 
               "\"\<fencing later\>\"", ",", "\"\<swordfighting tonight\>\"", 
               ",", "\"\<watching  hockey game\>\"", ",", 
               "\"\<playing   hockey game\>\"", ",", 
               "\"\<reading  AoPS Volume 2\>\"", ",", "\"\<cooking food\>\"", 
               ",", "\"\<hoolahooping\>\"", ",", "\"\<Sailing\>\"", ",", 
               "\"\<write emails\>\"", ",", "\"\<write psychology paper\>\"", 
               ",", "\"\<Watch lectures  MIT OCW\>\"", ",", 
               "\"\<interview  Google\>\"", ",", "\"\<watching TV\>\"", ",", 
               "\"\<watching  movie\>\"", ",", "\"\<listening  music\>\"", 
               ",", "\"\<make jewelry\>\"", ",", "\"\<paint  painting\>\"", 
               ",", "\"\<photos\>\"", ",", "\"\<going  cadets\>\"", ",", 
               "\"\<finishing   problem set\>\"", ",", 
               "\"\<playing baseball\>\"", ",", 
               "\"\<going  wrestling practice\>\"", ",", 
               "\"\<going  martial arts practice\>\"", ",", 
               "\"\<getting food\>\"", ",", "\"\<archery\>\"", ",", 
               "\"\<playing ultimate frisbee\>\"", ",", 
               "\"\<cross country\>\"", ",", "\"\<draw  vase.\>\"", ",", 
               "\"\<draw fruit.\>\"", ",", "\"\<library\>\"", ",", 
               "\"\<drinking  energy drink\>\"", ",", 
               "\"\<creating  website   project\>\"", ",", 
               "\"\<reviewing  economics notes\>\"", ",", 
               "\"\<driving   country\>\"", ",", "\"\<trick-or-treating\>\"", 
               ",", "\"\<drinking soylent\>\"", ",", "\"\<jog\>\"", ",", 
               "\"\<jog\>\"", ",", "\"\<bake  pie\>\"", ",", 
               "\"\<build  app\>\"", ",", "\"\<study linear algebra\>\"", 
               ",", "\"\<read  textbook\>\"", ",", "\"\<commute  train\>\"", 
               ",", "\"\<watch youtube videos\>\"", ",", 
               "\"\<play waterpolo\>\"", ",", "\"\<play water polo\>\"", ",", 
               "\"\<make  jam sandwhich\>\"", ",", "\"\<practice darts\>\"", 
               ",", "\"\<writing  math contest\>\"", ",", 
               "\"\<competing   badminton tournament\>\"", ",", 
               "\"\<playing crochet\>\"", ",", "\"\<play  card game\>\"", 
               ",", "\"\<play  cards\>\"", ",", 
               "\"\<giving  piano recital\>\"", ",", 
               "\"\<writing notes   test\>\"", ",", 
               "\"\<review  notes   test\>\"", ",", 
               "\"\<memorize  English script\>\"", ",", 
               "\"\<memorize  script\>\"", ",", "\"\<play  legos later\>\"", 
               ",", "\"\<play  flute\>\"", ",", "\"\<play ping pong\>\"", 
               ",", "\"\<play tennis\>\"", ",", "\"\<play   brother\>\"", 
               ",", "\"\<sleep\>\"", ",", "\"\<learn Java development\>\"", 
               ",", "\"\<learn Java development  class\>\"", ",", 
               "\"\<write memos\>\"", ",", "\"\<prepare  presentation\>\"", 
               ",", "\"\<write  letters\>\"", ",", 
               "\"\<finish  app implementation\>\"", ",", 
               "\"\<lift weights\>\"", ",", 
               "\"\<read  computability theory\>\"", ",", 
               "\"\<listen  rap music\>\"", ",", 
               "\"\<listen  classical music\>\"", ",", 
               "\"\<play  megablocks\>\"", ",", "\"\<yoga\>\"", ",", 
               "\"\<play golf\>\"", ",", "\"\<play squash\>\"", ",", 
               "\"\<eat squash\>\"", ",", "\"\<play\>\"", ",", 
               "\"\<creatively write\>\"", ",", "\"\<write  lab report\>\"", 
               ",", "\"\<calligrayphy\>\"", ",", "\"\<ice skating\>\"", ",", 
               "\"\<play fantasy sports\>\"", ",", "\"\<woodworking\>\"", 
               ",", "\"\<play   yoyo\>\"", ",", "\"\<play   yo-yo\>\"", ",", 
               "\"\<surfing\>\"", ",", "\"\<play quidditch\>\"", ",", 
               "\"\<mountain climbing\>\"", ",", "\"\<dance lesson\>\"", ",", 
               "\"\<dance\>\"", ",", "\"\<volunteer   hospital\>\"", ",", 
               "\"\<work   assignment\>\"", ",", "\"\<hydrating\>\"", ",", 
               "\"\<graph  sigmoid function\>\"", ",", 
               "\"\<browse instagram  evening\>\"", ",", 
               "\"\<lot  photography\>\"", ",", "\"\<personal finance\>\"", 
               ",", "\"\<gardening\>\"", ",", "\"\<art lesson\>\"", ",", 
               "\"\<hackathon\>\"", ",", "\"\<drink hard coffee\>\"", ",", 
               "\"\<clean  room\>\"", ",", "\"\<design  app\>\"", ",", 
               "\"\<work   typing speed\>\"", ",", "\"\<play chess\>\"", ",", 
               "\"\<chess club\>\"", ",", "\"\<practice   exam\>\"", ",", 
               "\"\<fix  car\>\"", ",", "\"\<fly  China\>\"", ",", 
               "\"\<write  list  1300+ swear words\>\"", ",", 
               "\"\<design  lab experiment\>\"", ",", 
               "\"\<conduct  job interviews\>\"", ",", 
               "\"\<clothes shopping\>\"", ",", "\"\<prepare  afidavit\>\"", 
               ",", "\"\<attend  debate club meeting\>\"", ",", 
               "\"\<eat  club sandwich\>\"", ",", 
               "\"\<prepare   science fair\>\"", ",", 
               "\"\<write  article   school newspaper\>\"", ",", 
               "\"\<practice  piano scales\>\"", ",", 
               "\"\<prepare financial statements\>\"", ",", 
               "\"\<play hungry hungry hippos\>\"", ",", "\"\<play risk\>\"", 
               ",", "\"\<paly poker\>\"", ",", "\"\<drink bubble tea\>\"", 
               ",", "\"\<ziplining\>\"", ",", "\"\<write  math contest\>\"", 
               ",", "\"\<write  labreport\>\"", ",", 
               "\"\<conduct  depositions\>\"", ",", "\"\<write  concerto\>\"",
                ",", "\"\<finish  programming project\>\"", ",", 
               "\"\<read  emails\>\"", ",", "\"\<windsailing\>\"", ",", 
               "\"\<surfing\>\"", ",", "\"\<boating\>\"", ",", 
               "\"\<restaurant  eat\>\"", ",", "\"\<tutor  peers\>\"", ",", 
               "\"\<play cricket\>\"", ",", "\"\<hiking\>\"", ",", 
               "\"\<play lacrosse\>\"", ",", "\"\<box\>\"", ",", 
               "\"\<play rugby later tonight\>\"", ",", 
               "\"\<scuba diving\>\"", ",", 
               "\"\<volunteer   homeless shelter\>\"", ",", 
               "\"\<study   library\>\"", ",", 
               "\"\<conduct  lab experiment\>\"", ",", "\"\<write poems\>\"", 
               ",", "\"\<swimming competition\>\"", ",", 
               "\"\<eat  doritos\>\"", ",", "\"\<write test data\>\"", ",", 
               "\"\<medicine\>\"", ",", "\"\<calculus homework\>\"", ",", 
               "\"\<physics problem st\>\"", ",", 
               "\"\<read lecture notes\>\"", ",", 
               "\"\<volleyball practice\>\"", ",", 
               "\"\<badminton training\>\"", ",", "\"\<eat falafel\>\"", ",", 
               "\"\<drink beer\>\"", ",", "\"\<grocery shopping\>\"", ",", 
               "\"\<watch advertisements\>\"", ",", "\"\<write  book\>\"", 
               ",", "\"\<chemistry homework\>\"", ",", 
               "\"\<prepare  siideshow\>\"", ",", "\"\<smell flowers\>\"", 
               ",", "\"\<arrange flowers\>\"", ",", 
               "\"\<recreational drugs\>\"", ",", 
               "\"\<going  play football\>\"", ",", 
               "\"\<going  play soccer\>\"", ",", "\"\<bowling\>\"", ",", 
               "\"\<play handball\>\"", ",", "\"\<playing softball\>\"", ",", 
               "\"\<attending track  field practice\>\"", ",", 
               "\"\<play billiards\>\"", ",", "\"\<play pool\>\"", ",", 
               "\"\<paint  room\>\"", ",", "\"\<nap club\>\"", ",", 
               "\"\<attend tea club\>\"", ",", "\"\<listen  techno music\>\"",
                ",", "\"\<perform  topological sort   directed acyclic \
graph\>\"", ",", "\"\<build  startup\>\"", ",", "\"\<exercise club\>\"", ",", 
               "\"\<data visualization\>\"", ",", "\"\<drink  soylent\>\"", 
               ",", "\"\<drink  diet coke\>\"", ",", "\"\<eat  chips\>\"", 
               ",", "\"\<invest   hundred dollars\>\"", ",", 
               "\"\<watch  android studio tutorials\>\"", ",", 
               "\"\<push  gihub\>\"", ",", "\"\<play league  legends\>\"", 
               ",", "\"\<play DOTA2\>\"", ",", "\"\<play Clash  Clans!\>\"", 
               ",", "\"\<gonna play\>\"", ",", 
               "\"\<watch AlphaGo's games\>\"", ",", "\"\<train  biceps\>\"", 
               ",", "\"\<train  triceps\>\"", ",", 
               "\"\<watch video tutorials\>\"", ",", 
               "\"\<train  quadriceps\>\"", ",", "\"\<train  abdominals\>\"", 
               ",", "\"\<design  user interface\>\"", ",", 
               "\"\<play texas hold'em\>\"", ",", "\"\<install Linux\>\"", 
               ",", "\"\<look   word   dictionary\>\"", ",", 
               "\"\<use  dictionary    nth fibonacci number\>\"", ",", 
               "\"\<write  database   rabbit girls\>\"", ",", 
               "\"\<practice programming  DMOJ\>\"", ",", 
               "\"\<practice programming  USACO\>\"", ",", 
               "\"\<write training data   ML algo\>\"", ",", 
               "\"\<read   Markhov chains\>\"", ",", "\"\<situps\>\"", ",", 
               "\"\<push  code   cloud\>\"", ",", "\"\<eat  pizza crust\>\"", 
               ",", "\"\<drink  sprite\>\"", ",", "\"\<charge  laptop\>\"", 
               ",", "\"\<listen  Post Malone's music\>\"", ",", 
               "\"\<listen  21 Savage's music\>\"", ",", 
               "\"\<listen  Beethoven's music\>\"", ",", 
               "\"\<listen  Chopin's music\>\"", ",", 
               "\"\<listen  Scriabin's music\>\"", ",", 
               "\"\<listen  Schoenberg's music\>\"", ",", 
               "\"\<watch Martin Luther King's speech\>\"", ",", 
               "\"\<drink  energy drink\>\"", ",", "\"\<cut  hair\>\"", ",", 
               "\"\<brush  teeth\>\"", ",", "\"\<comb  hair\>\"", ",", 
               "\"\<buy  new computer\>\"", ",", 
               "\"\<robotics club meeting\>\"", ",", 
               "\"\<write  Python library\>\"", ",", 
               "\"\<smash  volleyball\>\"", ",", "\"\<biology homework\>\"", 
               ",", "\"\<chemistry homework\>\""}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
              "\"\<essential\>\"", ",", "\"\<work\>\"", ",", 
               "\"\<extracurricular\>\"", ",", "\"\<leisure\>\"", ",", 
               "\"\<sport\>\"", ",", "\"\<essential\>\"", ",", "\"\<work\>\"",
                ",", "\"\<extracurricular\>\"", ",", "\"\<leisure\>\"", ",", 
               "\"\<sport\>\"", ",", "\"\<essential\>\"", ",", "\"\<work\>\"",
                ",", "\"\<extracurricular\>\"", ",", "\"\<leisure\>\"", ",", 
               "\"\<sport\>\"", ",", "\"\<essential\>\"", ",", "\"\<work\>\"",
                ",", "\"\<extracurricular\>\"", ",", "\"\<leisure\>\"", ",", 
               "\"\<sport\>\"", ",", "\"\<essential\>\"", ",", "\"\<work\>\"",
                ",", "\"\<extracurricular\>\"", ",", "\"\<leisure\>\"", ",", 
               "\"\<essential\>\"", ",", "\"\<extracurricular\>\"", ",", 
               "\"\<leisure\>\"", ",", "\"\<work\>\"", ",", 
               "\"\<essential\>\"", ",", "\"\<extracurricular\>\"", ",", 
               "\"\<essential\>\"", ",", "\"\<sport\>\"", ",", 
               "\"\<sport\>\"", ",", "\"\<work\>\"", ",", "\"\<sport\>\"", 
               ",", "\"\<extracurricular\>\"", ",", "\"\<extracurricular\>\"",
                ",", "\"\<work\>\"", ",", "\"\<work\>\"", ",", "\"\<work\>\"",
                ",", "\"\<work\>\"", ",", "\"\<leisure\>\"", ",", 
               "\"\<work\>\"", ",", "\"\<extracurricular\>\"", ",", 
               "\"\<sport\>\"", ",", "\"\<work\>\"", ",", "\"\<leisure\>\"", 
               ",", "\"\<leisure\>\"", ",", "\"\<leisure\>\"", ",", 
               "\"\<leisure\>\"", ",", "\"\<leisure\>\"", ",", 
               "\"\<leisure\>\"", ",", "\"\<leisure\>\"", ",", 
               "\"\<leisure\>\"", ",", "\"\<work\>\"", ",", "\"\<work\>\"", 
               ",", "\"\<sport\>\"", ",", "\"\<essential\>\"", ",", 
               "\"\<leisure\>\"", ",", "\"\<sport\>\"", ",", "\"\<sport\>\"", 
               ",", "\"\<essential\>\"", ",", "\"\<essential\>\"", ",", 
               "\"\<essential\>\"", ",", "\"\<essential\>\"", ",", 
               "\"\<essential\>\"", ",", "\"\<essential\>\"", ",", 
               "\"\<essential\>\"", ",", "\"\<sport\>\"", ",", 
               "\"\<sport\>\"", ",", "\"\<leisure\>\"", ",", "\"\<sport\>\"", 
               ",", "\"\<work\>\"", ",", "\"\<essential\>\"", ",", 
               "\"\<sport\>\"", ",", "\"\<sport\>\"", ",", "\"\<work\>\"", 
               ",", "\"\<work\>\"", ",", "\"\<work\>\"", ",", "\"\<work\>\"", 
               ",", "\"\<leisure\>\"", ",", "\"\<leisure\>\"", ",", 
               "\"\<leisure\>\"", ",", "\"\<leisure\>\"", ",", 
               "\"\<leisure\>\"", ",", "\"\<leisure\>\"", ",", 
               "\"\<extracurricular\>\"", ",", "\"\<work\>\"", ",", 
               "\"\<sport\>\"", ",", "\"\<sport\>\"", ",", "\"\<sport\>\"", 
               ",", "\"\<essential\>\"", ",", "\"\<sport\>\"", ",", 
               "\"\<sport\>\"", ",", "\"\<sport\>\"", ",", 
               "\"\<extracurricular\>\"", ",", "\"\<extracurricular\>\"", 
               ",", "\"\<work\>\"", ",", "\"\<essential\>\"", ",", 
               "\"\<work\>\"", ",", "\"\<work\>\"", ",", "\"\<essential\>\"", 
               ",", "\"\<leisure\>\"", ",", "\"\<essential\>\"", ",", 
               "\"\<sport\>\"", ",", "\"\<sport\>\"", ",", 
               "\"\<essential\>\"", ",", "\"\<work\>\"", ",", "\"\<work\>\"", 
               ",", "\"\<work\>\"", ",", "\"\<essential\>\"", ",", 
               "\"\<leisure\>\"", ",", "\"\<sport\>\"", ",", "\"\<sport\>\"", 
               ",", "\"\<essential\>\"", ",", "\"\<sport\>\"", ",", 
               "\"\<extracurricular\>\"", ",", "\"\<sport\>\"", ",", 
               "\"\<sport\>\"", ",", "\"\<leisure\>\"", ",", 
               "\"\<leisure\>\"", ",", "\"\<extracurricular\>\"", ",", 
               "\"\<work\>\"", ",", "\"\<work\>\"", ",", "\"\<work\>\"", ",", 
               "\"\<work\>\"", ",", "\"\<leisure\>\"", ",", 
               "\"\<extracurricular\>\"", ",", "\"\<sport\>\"", ",", 
               "\"\<sport\>\"", ",", "\"\<leisure\>\"", ",", 
               "\"\<essential\>\"", ",", "\"\<extracurricular\>\"", ",", 
               "\"\<work\>\"", ",", "\"\<work\>\"", ",", "\"\<work\>\"", ",", 
               "\"\<work\>\"", ",", "\"\<work\>\"", ",", "\"\<sport\>\"", 
               ",", "\"\<work\>\"", ",", "\"\<leisure\>\"", ",", 
               "\"\<leisure\>\"", ",", "\"\<leisure\>\"", ",", 
               "\"\<sport\>\"", ",", "\"\<sport\>\"", ",", "\"\<sport\>\"", 
               ",", "\"\<essential\>\"", ",", "\"\<leisure\>\"", ",", 
               "\"\<leisure\>\"", ",", "\"\<work\>\"", ",", "\"\<leisure\>\"",
                ",", "\"\<sport\>\"", ",", "\"\<leisure\>\"", ",", 
               "\"\<leisure\>\"", ",", "\"\<leisure\>\"", ",", 
               "\"\<leisure\>\"", ",", "\"\<sport\>\"", ",", "\"\<sport\>\"", 
               ",", "\"\<sport\>\"", ",", "\"\<extracurricular\>\"", ",", 
               "\"\<extracurricular\>\"", ",", "\"\<extracurricular\>\"", 
               ",", "\"\<work\>\"", ",", "\"\<essential\>\"", ",", 
               "\"\<work\>\"", ",", "\"\<leisure\>\"", ",", "\"\<leisure\>\"",
                ",", "\"\<work\>\"", ",", "\"\<leisure\>\"", ",", 
               "\"\<extracurricular\>\"", ",", "\"\<leisure\>\"", ",", 
               "\"\<essential\>\"", ",", "\"\<work\>\"", ",", "\"\<work\>\"", 
               ",", "\"\<work\>\"", ",", "\"\<leisure\>\"", ",", 
               "\"\<extracurricular\>\"", ",", "\"\<work\>\"", ",", 
               "\"\<work\>\"", ",", "\"\<essential\>\"", ",", "\"\<work\>\"", 
               ",", "\"\<work\>\"", ",", "\"\<work\>\"", ",", 
               "\"\<essential\>\"", ",", "\"\<work\>\"", ",", 
               "\"\<extracurricular\>\"", ",", "\"\<essential\>\"", ",", 
               "\"\<extracurricular\>\"", ",", "\"\<extracurricular\>\"", 
               ",", "\"\<extracurricular\>\"", ",", "\"\<work\>\"", ",", 
               "\"\<leisure\>\"", ",", "\"\<leisure\>\"", ",", 
               "\"\<leisure\>\"", ",", "\"\<essential\>\"", ",", 
               "\"\<leisure\>\"", ",", "\"\<extracurricular\>\"", ",", 
               "\"\<work\>\"", ",", "\"\<work\>\"", ",", 
               "\"\<extracurricular\>\"", ",", "\"\<work\>\"", ",", 
               "\"\<work\>\"", ",", "\"\<sport\>\"", ",", "\"\<sport\>\"", 
               ",", "\"\<leisure\>\"", ",", "\"\<essential\>\"", ",", 
               "\"\<work\>\"", ",", "\"\<sport\>\"", ",", "\"\<sport\>\"", 
               ",", "\"\<sport\>\"", ",", "\"\<sport\>\"", ",", 
               "\"\<sport\>\"", ",", "\"\<sport\>\"", ",", 
               "\"\<extracurricular\>\"", ",", "\"\<work\>\"", ",", 
               "\"\<work\>\"", ",", "\"\<work\>\"", ",", 
               "\"\<extracurricular\>\"", ",", "\"\<essential\>\"", ",", 
               "\"\<work\>\"", ",", "\"\<essential\>\"", ",", "\"\<work\>\"", 
               ",", "\"\<work\>\"", ",", "\"\<work\>\"", ",", "\"\<sport\>\"",
                ",", "\"\<sport\>\"", ",", "\"\<essential\>\"", ",", 
               "\"\<essential\>\"", ",", "\"\<essential\>\"", ",", 
               "\"\<leisure\>\"", ",", "\"\<work\>\"", ",", "\"\<work\>\"", 
               ",", "\"\<work\>\"", ",", "\"\<leisure\>\"", ",", 
               "\"\<leisure\>\"", ",", "\"\<leisure\>\"", ",", 
               "\"\<sport\>\"", ",", "\"\<sport\>\"", ",", "\"\<sport\>\"", 
               ",", "\"\<sport\>\"", ",", "\"\<sport\>\"", ",", 
               "\"\<sport\>\"", ",", "\"\<sport\>\"", ",", "\"\<sport\>\"", 
               ",", "\"\<work\>\"", ",", "\"\<extracurricular\>\"", ",", 
               "\"\<extracurricular\>\"", ",", "\"\<leisure\>\"", ",", 
               "\"\<work\>\"", ",", "\"\<work\>\"", ",", 
               "\"\<extracurricular\>\"", ",", "\"\<work\>\"", ",", 
               "\"\<essential\>\"", ",", "\"\<essential\>\"", ",", 
               "\"\<essential\>\"", ",", "\"\<work\>\"", ",", "\"\<work\>\"", 
               ",", "\"\<work\>\"", ",", "\"\<leisure\>\"", ",", 
               "\"\<leisure\>\"", ",", "\"\<leisure\>\"", ",", 
               "\"\<leisure\>\"", ",", "\"\<leisure\>\"", ",", 
               "\"\<sport\>\"", ",", "\"\<sport\>\"", ",", "\"\<work\>\"", 
               ",", "\"\<sport\>\"", ",", "\"\<sport\>\"", ",", 
               "\"\<work\>\"", ",", "\"\<leisure\>\"", ",", "\"\<work\>\"", 
               ",", "\"\<work\>\"", ",", "\"\<work\>\"", ",", "\"\<work\>\"", 
               ",", "\"\<work\>\"", ",", "\"\<work\>\"", ",", "\"\<work\>\"", 
               ",", "\"\<work\>\"", ",", "\"\<sport\>\"", ",", "\"\<work\>\"",
                ",", "\"\<essential\>\"", ",", "\"\<essential\>\"", ",", 
               "\"\<work\>\"", ",", "\"\<leisure\>\"", ",", "\"\<leisure\>\"",
                ",", "\"\<leisure\>\"", ",", "\"\<leisure\>\"", ",", 
               "\"\<leisure\>\"", ",", "\"\<leisure\>\"", ",", "\"\<work\>\"",
                ",", "\"\<essential\>\"", ",", "\"\<essential\>\"", ",", 
               "\"\<essential\>\"", ",", "\"\<essential\>\"", ",", 
               "\"\<essential\>\"", ",", "\"\<extracurricular\>\"", ",", 
               "\"\<work\>\"", ",", "\"\<sport\>\"", ",", "\"\<work\>\"", 
               ",", "\"\<work\>\""}], "}"}]}], "}"}], "]"}], ",", 
          RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Quality\>\""}]}], "]"}], 
        "[", 
        RowBox[{"#query", ",", "\"\<Probabilities\>\""}], "]"}], "&"}]}], 
     "]"}]}], ";"}], "*)"}]], "Input",
 CellChangeTimes->{{3.717621382990097*^9, 3.717621392882698*^9}, {
   3.717621460800786*^9, 3.7176215144591646`*^9}, 3.7176356773490257`*^9, {
   3.7176357323949356`*^9, 3.7176357403143373`*^9}, 3.7176358510670657`*^9, {
   3.7176361770579495`*^9, 3.717636179959883*^9}, {3.7176362134666567`*^9, 
   3.7176362196196404`*^9}},ExpressionUUID->"3ec27d87-fc3f-403e-84d5-\
9bcc50bbe970"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"CloudDeploy", "[", 
   RowBox[{"api", ",", 
    RowBox[{"Permissions", "\[Rule]", "\"\<Public\>\""}]}], "]"}], 
  "*)"}]], "Input",
 CellChangeTimes->{{3.717635479647902*^9, 3.717635514550671*^9}, {
  3.717635583302359*^9, 3.71763558448483*^9}, {3.717637883923068*^9, 
  3.7176378865697126`*^9}},ExpressionUUID->"e2328aef-f253-43fa-bbaf-\
bc13c7f3f54f"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Manipulate", "[", 
   RowBox[{
    RowBox[{"BarChart", "[", 
     RowBox[{
      RowBox[{"c", "[", 
       RowBox[{
        RowBox[{"ToString", "[", "query", "]"}], ",", 
        "\"\<Probabilities\>\""}], "]"}], ",", 
      RowBox[{"ChartLabels", "\[Rule]", "Automatic"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"query", ",", "\"\<hello world\>\""}], "}"}]}], "]"}], 
  "*)"}]], "Input",
 CellChangeTimes->{{3.7176339534788494`*^9, 3.7176339581352277`*^9}, {
  3.717633990880125*^9, 3.717634003309395*^9}, {3.717634087040877*^9, 
  3.7176342801536493`*^9}, {3.717634412575904*^9, 3.717634475483694*^9}, {
  3.717634571935582*^9, 
  3.7176345742158785`*^9}},ExpressionUUID->"e9516e99-8a46-4507-bbe5-\
688c6b65f679"]
},
WindowSize->{1366, 725},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
FrontEndVersion->"11.2 for Microsoft Windows (64-bit) (September 10, 2017)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 206, 4, 28, "Input",ExpressionUUID->"16b7220e-a1be-4d25-ae58-4df1f75fc9d4"],
Cell[767, 26, 776, 20, 28, "Input",ExpressionUUID->"aaf4c49f-7e09-4c16-b1fc-ab74eed0c828"],
Cell[CellGroupData[{
Cell[1568, 50, 923, 20, 48, "Input",ExpressionUUID->"f6c93fd9-abe4-408c-813f-88b9fd75fc6b"],
Cell[2494, 72, 10579, 208, 71, "Output",ExpressionUUID->"caac58ba-cab8-4f19-a868-cbed3e2e76aa"],
Cell[13076, 282, 50821, 985, 569, "Output",ExpressionUUID->"5c79d893-1375-4038-9d8a-e2823ae70772"]
}, Open  ]],
Cell[63912, 1270, 23859, 365, 1226, "Input",ExpressionUUID->"3ec27d87-fc3f-403e-84d5-9bcc50bbe970"],
Cell[87774, 1637, 394, 9, 28, "Input",ExpressionUUID->"e2328aef-f253-43fa-bbaf-bc13c7f3f54f"],
Cell[88171, 1648, 763, 19, 28, "Input",ExpressionUUID->"e9516e99-8a46-4507-bbe5-688c6b65f679"]
}
]
*)

